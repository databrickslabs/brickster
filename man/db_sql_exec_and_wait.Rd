% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sql-query-execution.R
\name{db_sql_exec_and_wait}
\alias{db_sql_exec_and_wait}
\title{Execute SQL Query and Wait for Completion}
\usage{
db_sql_exec_and_wait(
  warehouse_id,
  statement,
  catalog = NULL,
  schema = NULL,
  parameters = NULL,
  row_limit = NULL,
  byte_limit = NULL,
  wait_timeout = "10s",
  disposition = c("EXTERNAL_LINKS", "INLINE"),
  format = c("ARROW_STREAM", "JSON_ARRAY"),
  host = db_host(),
  token = db_token(),
  show_progress = TRUE
)
}
\arguments{
\item{warehouse_id}{String, ID of warehouse upon which to execute a statement.}

\item{statement}{String, the SQL statement to execute. The statement can
optionally be parameterized, see \code{parameters}.}

\item{catalog}{String, sets default catalog for statement execution, similar
to \verb{USE CATALOG} in SQL.}

\item{schema}{String, sets default schema for statement execution, similar
to \verb{USE SCHEMA} in SQL.}

\item{parameters}{List of Named Lists, parameters to pass into a SQL
statement containing parameter markers.

A parameter consists of a name, a value, and \emph{optionally} a type.
To represent a \code{NULL} value, the value field may be omitted or set to \code{NULL}
explicitly.

See \href{https://docs.databricks.com/api/workspace/statementexecution/executestatement}{docs}
for more details.}

\item{row_limit}{Integer, applies the given row limit to the statement's
result set, but unlike the \code{LIMIT} clause in SQL, it also sets the
\code{truncated} field in the response to indicate whether the result was trimmed
due to the limit or not.}

\item{byte_limit}{Integer, applies the given byte limit to the statement's
result size. Byte counts are based on internal data representations and
might not match the final size in the requested format. If the result was
truncated due to the byte limit, then \code{truncated} in the response is set to
true. When using \code{EXTERNAL_LINKS} disposition, a default byte_limit of
100 GiB is applied if \code{byte_limit} is not explicitly set.}

\item{wait_timeout}{Initial wait timeout (default "30s")}

\item{disposition}{One of \code{"INLINE"} (default) or \code{"EXTERNAL_LINKS"}. See
\href{https://docs.databricks.com/api/workspace/statementexecution/executestatement}{docs}
for details.}

\item{format}{One of \code{"JSON_ARRAY"} (default), \code{"ARROW_STREAM"}, or \code{"CSV"}.
See \href{https://docs.databricks.com/api/workspace/statementexecution/executestatement}{docs}
for details.}

\item{host}{Databricks workspace URL, defaults to calling \code{\link[=db_host]{db_host()}}.}

\item{token}{Databricks workspace token, defaults to calling \code{\link[=db_token]{db_token()}}.}
}
\value{
Status response with manifest when query completes successfully
}
\description{
Internal helper that executes a query and waits for completion.
This separates the execution/polling logic from result fetching.
}
\keyword{internal}
